services:
  crawler:
    build: crawler
    restart: always

    depends_on:
      db:
        condition: service_healthy

    env_file:
      - .env

    # environment:
    #   POSTGRES_DB_USER: ${POSTGRES_DB_USER}
    #   POSTGRES_DB_PASSWORD: ${POSTGRES_DB_PASSWORD}
    #   POSTGRES_DB_DATABASE: ${POSTGRES_DB_DATABASE}
    #   POSTGRES_DB_HOST: ${POSTGRES_DB_HOST}
    #   MAX_CRAWL_DEPTH: ${MAX_CRAWL_DEPTH}

  indexer:
    build: indexer
    restart: always

    depends_on:
      db:
        condition: service_healthy

    env_file:
      - .env

    # environment:
    #   POSTGRES_DB_USER: ${POSTGRES_DB_USER}
    #   POSTGRES_DB_PASSWORD: ${POSTGRES_DB_PASSWORD}
    #   POSTGRES_DB_DATABASE: ${POSTGRES_DB_DATABASE}
    #   POSTGRES_DB_HOST: ${POSTGRES_DB_HOST}

  backend:
    build: backend
    restart: always

    env_file:
      - .env

    ports:
      - 3333:3333
    depends_on:
      db:
        condition: service_healthy

  frontend:
    build: 
      context: frontend
      args:
        - VITE_BACKEND_URL=${BACKEND_URL}

    restart: always

    ports:
      - 8080:80
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres
    restart: always
    shm_size: 128mb
    volumes:
      - "./postgres-data/data:/var/lib/postgresql/data/"
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${POSTGRES_DB_USER}
      POSTGRES_PASSWORD: ${POSTGRES_DB_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_DATABASE}

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_DB_USER} -d ${POSTGRES_DB_DATABASE}"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 10s

  adminer:
    image: adminer
    restart: always
    ports:
      - 8081:8080